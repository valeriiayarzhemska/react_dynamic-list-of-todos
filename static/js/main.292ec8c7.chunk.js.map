{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/Error/Error.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","helpers/helpers.ts","index.tsx"],"names":["FilterType","TodoList","props","todos","selectedTodo","onSelect","className","map","todo","id","title","completed","isSelectedTodo","classNames","type","onClick","TodoFilter","React","memo","query","onQueryChange","filterType","onFilterChange","value","onChange","event","target","Object","values","slice","toUpperCase","placeholder","style","pointerEvents","Loader","Error","color","get","url","delay","fullURL","Promise","resolve","setTimeout","then","a","fetch","response","ok","status","statusText","json","getUser","userId","TodoModal","onClose","useState","user","setUser","isUserLoading","setIsUserLoading","hasUserError","setHasUserError","useEffect","loadUser","userFromServer","href","email","name","App","setTodos","isLoading","setIsLoading","hasError","setHasError","ALL","setFilterType","setQuery","setselectedTodo","visibleTodos","useMemo","filter","toLowerCase","includes","ACTIVE","COMPLETED","getFilteredTodos","loadData","todosFromServer","handleSelectedTodo","useCallback","handleCloseModal","ReactDOM","render","document","getElementById"],"mappings":"iLAAYA,E,mGCWCC,EAAsB,SAACC,GAClC,IACEC,EAGED,EAHFC,MACAC,EAEEF,EAFFE,aACAC,EACEH,EADFG,SAGF,OACE,wBAAOC,UAAU,+BAAjB,UACE,gCACE,+BACE,mCACA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAGjB,uCACA,wCAIJ,gCACGH,EAAMI,KAAI,SAACC,GACV,IACEC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,MACAC,EACEH,EADFG,UAGIC,GAA6B,OAAZR,QAAY,IAAZA,OAAA,EAAAA,EAAcK,MAAOA,EAE5C,OACE,qBACE,UAAQ,OACRH,UAAWO,IACT,CACE,4BAA6BD,IAJnC,UASE,oBAAIN,UAAU,eAAd,SACGG,IAGH,oBAAIH,UAAU,eAAd,SACGK,GACC,sBAAML,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWO,IAAW,CACvB,mBAAoBF,EACpB,mBAAoBA,IAFtB,SAKGD,MAIL,oBAAIJ,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVQ,KAAK,SACLC,QAAS,WACPV,EAASG,IALb,SAQE,sBAAMF,UAAU,OAAhB,SACE,mBAAGA,UAAWO,IACZ,MAAO,CACL,UAAWD,EACX,eAAgBA,cArCrBH,a,SDnDPT,K,UAAAA,E,gBAAAA,E,uBAAAA,M,KEUL,IAAMgB,EAAaC,IAAMC,MAAY,SAAChB,GAC3C,IACEiB,EAIEjB,EAJFiB,MACAC,EAGElB,EAHFkB,cACAC,EAEEnB,EAFFmB,WACAC,EACEpB,EADFoB,eAGF,OACE,uBAAMhB,UAAU,mBAAhB,UACE,mBAAGA,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,wBACE,UAAQ,eACRiB,MAAOF,EACPG,SAAU,SAACC,GACTH,EAAeG,EAAMC,OAAOH,QAJhC,SAQGI,OAAOC,OAAO5B,GAAYO,KAAI,SAACO,GAC9B,OACE,wBACES,MAAOT,EADT,SAIGA,EAAKe,MAAM,EAAG,GAAGC,cAAgBhB,EAAKe,MAAM,IAFxCf,YAUjB,oBAAGR,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRQ,KAAK,OACLR,UAAU,QACVyB,YAAY,YACZR,MAAOJ,EACPK,SAAU,SAACC,GACTL,EAAcK,EAAMC,OAAOH,UAI/B,sBAAMjB,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGda,GACC,sBACEb,UAAU,gBACV0B,MAAO,CAAEC,cAAe,OAF1B,SAIE,wBACE,aAAW,QACX,UAAQ,oBACRnB,KAAK,SACLR,UAAU,SACVS,QAAS,kBAAMK,EAAc,kBCnE9Bc,G,MAAmB,kBAC9B,qBAAK5B,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCHN6B,EAAQlB,IAAMC,MAAK,WAC9B,OACE,qBAAKc,MAAO,CAAEI,MAAO,OAArB,+CCUJ,SAASC,EAAOC,GAEd,IARYC,EAQNC,EAZS,iEAYYF,EAAM,QAGjC,OAXYC,EAWA,IAVL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OAUnBK,KADI,sBACC,kCAAAC,EAAA,sEACmBC,MAAMN,GADzB,UACEO,EADF,OAGFC,EAGED,EAHFC,GACAC,EAEEF,EAFFE,OACAC,EACEH,EADFG,WAGGF,EARD,sBASI,IAAIb,MAAJ,UAAac,EAAb,cAAyBC,IAT7B,gCAYGH,EAASI,QAZZ,4CAgBH,IAEMC,EAAU,SAACC,GAAD,OAAoBhB,EAAG,iBAAiBgB,KCzBlDC,EAAuB,SAACpD,GACnC,IACEE,EAEEF,EAFFE,aACAmD,EACErD,EADFqD,QAIA9C,EAIEL,EAJFK,GACAC,EAGEN,EAHFM,MACA2C,EAEEjD,EAFFiD,OACA1C,EACEP,EADFO,UAGF,EAAwB6C,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAwCJ,oBAAS,GAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAoBA,OAlBAC,qBAAU,WACR,IAAMC,EAAQ,uCAAG,4BAAAnB,EAAA,6DACfe,GAAiB,GADF,kBAIgBR,EAAQC,GAJxB,OAIPY,EAJO,OAMbP,EAAQO,GANK,gDAQbH,GAAgB,GARH,QAWfF,GAAiB,GAXF,yDAAH,qDAcdI,MACC,CAAC5D,IAGF,sBAAKE,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBAEdqD,EACC,cAAC,EAAD,IAEA,sBAAKrD,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,yBAIYG,KAGZ,wBACE,aAAW,QACXK,KAAK,SACLR,UAAU,SACV,UAAQ,cACRS,QAASwC,OAIb,sBAAKjD,UAAU,kBAAf,UACE,mBAAGA,UAAU,QAAQ,UAAQ,cAA7B,SACGI,IAGF+C,GACC,oBAAGnD,UAAU,QAAQ,UAAQ,aAA7B,UACGK,EACC,wBAAQL,UAAU,mBAAlB,kBAEA,wBAAQA,UAAU,kBAAlB,qBAGD,OAED,mBAAG4D,KAAI,iBAAYT,EAAKU,OAAxB,SACGV,EAAKW,gBAQjBP,GACC,cAAC,EAAD,Q,QC5EKQ,EAAU,WACrB,MAA0Bb,mBAAiB,IAA3C,mBAAOrD,EAAP,KAAcmE,EAAd,KACA,EAAkCd,oBAAS,GAA3C,mBAAOe,EAAP,KAAkBC,EAAlB,KACA,EAAgChB,oBAAS,GAAzC,mBAAOiB,EAAP,KAAiBC,EAAjB,KACA,EAAoClB,mBAASxD,EAAW2E,KAAxD,mBAAOtD,EAAP,KAAmBuD,EAAnB,KACA,EAA0BpB,mBAAS,IAAnC,mBAAOrC,EAAP,KAAc0D,EAAd,KACA,EAAwCrB,mBAAsB,MAA9D,mBAAOpD,EAAP,KAAqB0E,EAArB,KAEMC,EAAeC,mBAAQ,WAC3B,OC5B4B,SAC9B7E,EACAkB,EACAF,GAQA,OANsB,YAAOhB,GAEU8E,QAAO,YAC5C,OAD2D,EAAZvE,MAClCwE,cAAcC,SAAShE,EAAM+D,kBAGvBD,QAAO,SAACzE,GAC3B,OAAQa,GACN,KAAKrB,EAAWoF,OACd,OAAQ5E,EAAKG,UAEf,KAAKX,EAAWqF,UACd,OAAO7E,EAAKG,UAEd,QACE,OAAOH,MDQJ8E,CAAiBnF,EAAOkB,EAAYF,KAC1C,CAAChB,EAAOkB,EAAYF,IAEvB4C,qBAAU,WACR,IAAMwB,EAAQ,uCAAG,4BAAA1C,EAAA,6DACf2B,GAAa,GADE,kBFCSnC,EAAY,UEDrB,OAIPmD,EAJO,OAMblB,EAASkB,GANI,gDAQbd,GAAY,GARC,QAWfF,GAAa,GAXE,yDAAH,qDAcde,MACC,IAEH,IAAME,EAAqBC,uBAAY,SAAClF,GACtCsE,EAAgBtE,KACf,CAACJ,IAEEuF,EAAmBD,uBAAY,WACnCZ,EAAgB,QACf,CAAC1E,IAEJ,OACE,qCACE,qBAAKE,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAACU,EAAD,CACEG,MAAOA,EACPC,cAAeyD,EACfxD,WAAYA,EACZC,eAAgBsD,MAIpB,sBAAKtE,UAAU,QAAf,UACGmE,GACC,cAAC,EAAD,IAGDF,GACC,cAAC,EAAD,KAGAE,IAAaF,GACb,cAAC,EAAD,CACEpE,MAAO4E,EACP3E,aAAcA,EACdC,SAAUoF,cAQrBrF,GACC,cAAC,EAAD,CACEA,aAAcA,EACdmD,QAASoC,QEjGnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.292ec8c7.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import { FC } from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  onSelect: (selectedTodo: Todo | null) => void,\n};\n\nexport const TodoList: FC<Props> = (props) => {\n  const {\n    todos,\n    selectedTodo,\n    onSelect,\n  } = props;\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map((todo) => {\n          const {\n            id,\n            title,\n            completed,\n          } = todo;\n\n          const isSelectedTodo = selectedTodo?.id === id;\n\n          return (\n            <tr\n              data-cy=\"todo\"\n              className={classNames(\n                {\n                  'has-background-info-light': isSelectedTodo,\n                },\n              )}\n              key={id}\n            >\n              <td className=\"is-vcentered\">\n                {id}\n              </td>\n\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => {\n                    onSelect(todo);\n                  }}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames(\n                      'far', {\n                        'fa-eye': !isSelectedTodo,\n                        'fa-eye-slash': isSelectedTodo,\n                      },\n                    )}\n                    />\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  query: string,\n  onQueryChange: (query: string) => void,\n  filterType: FilterType,\n  onFilterChange: (filterType: FilterType) => void,\n};\n\nexport const TodoFilter = React.memo<Props>((props) => {\n  const {\n    query,\n    onQueryChange,\n    filterType,\n    onFilterChange,\n  } = props;\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => {\n              onFilterChange(event.target.value as FilterType);\n            }}\n          >\n\n            {Object.values(FilterType).map((type) => {\n              return (\n                <option\n                  value={type}\n                  key={type}\n                >\n                  {type.slice(0, 1).toUpperCase() + type.slice(1)}\n                </option>\n              );\n            })}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            onQueryChange(event.target.value);\n          }}\n        />\n\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span\n            className=\"icon is-right\"\n            style={{ pointerEvents: 'all' }}\n          >\n            <button\n              aria-label=\"clear\"\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => onQueryChange('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\n\nexport const Error = React.memo(() => {\n  return (\n    <div style={{ color: 'red' }}>\n      Sorry, something went wrong :C\n    </div>\n  );\n});\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(async () => {\n      const response = await fetch(fullURL);\n      const {\n        ok,\n        status,\n        statusText,\n      } = response;\n\n      if (!ok) {\n        throw new Error(`${status} - ${statusText}`);\n      }\n\n      return response.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Error } from '../Error';\n\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype Props = {\n  selectedTodo: Todo,\n  onClose: () => void,\n};\n\nexport const TodoModal: FC<Props> = (props) => {\n  const {\n    selectedTodo,\n    onClose,\n  } = props;\n\n  const {\n    id,\n    title,\n    userId,\n    completed,\n  } = selectedTodo;\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(false);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setIsUserLoading(true);\n\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n      } catch {\n        setHasUserError(true);\n      }\n\n      setIsUserLoading(false);\n    };\n\n    loadUser();\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              aria-label=\"close\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {user && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n\n      {hasUserError && (\n        <Error />\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC,\n  useEffect,\n  useState,\n  useMemo,\n  useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Error } from './components/Error';\n\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\nimport { getTodos } from './api';\nimport { getFilteredTodos } from './helpers';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [filterType, setFilterType] = useState(FilterType.ALL);\n  const [query, setQuery] = useState('');\n  const [selectedTodo, setselectedTodo] = useState<Todo | null>(null);\n\n  const visibleTodos = useMemo(() => {\n    return getFilteredTodos(todos, filterType, query);\n  }, [todos, filterType, query]);\n\n  useEffect(() => {\n    const loadData = async () => {\n      setIsLoading(true);\n\n      try {\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n      } catch {\n        setHasError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    loadData();\n  }, []);\n\n  const handleSelectedTodo = useCallback((todo: Todo | null) => {\n    setselectedTodo(todo);\n  }, [selectedTodo]);\n\n  const handleCloseModal = useCallback(() => {\n    setselectedTodo(null);\n  }, [selectedTodo]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onQueryChange={setQuery}\n                filterType={filterType}\n                onFilterChange={setFilterType}\n              />\n            </div>\n\n            <div className=\"block\">\n              {hasError && (\n                <Error />\n              )}\n\n              {isLoading && (\n                <Loader />\n              )}\n\n              {!hasError && !isLoading && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectedTodo={selectedTodo}\n                  onSelect={handleSelectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          onClose={handleCloseModal}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { FilterType } from '../types/FilterType';\n\nexport const getFilteredTodos = (\n  todos: Todo[],\n  filterType: FilterType,\n  query: string,\n) => {\n  const copyVisibleTodos = [...todos];\n\n  const searchedTodos = copyVisibleTodos.filter(({ title }) => {\n    return title.toLowerCase().includes(query.toLowerCase());\n  });\n\n  return searchedTodos.filter((todo) => {\n    switch (filterType) {\n      case FilterType.ACTIVE:\n        return !todo.completed;\n\n      case FilterType.COMPLETED:\n        return todo.completed;\n\n      default:\n        return todo;\n    }\n  });\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}